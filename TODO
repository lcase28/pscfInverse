Updated 8 November 2019

WRITE
-- Swarm log generation
    -- Record Agent positions / fitnesses at each step
    -- Neighbors Lists
-- Agent Logging
    -- Update Agent to accept "root" directory at each update to write out logs

-- Determine other structures needed for minimum functionality.


Updated: 14 June 2019

Next Tasks:
    - Refactor Swarm.py
            - Split Point into a simpler base class. Add complexity in derived classes.
                - Split __eq__ method: __eq__ should cover fitness, samePoint should compare coordinates
                **** DONE ****
        - Move graph entirely into Swarm class (remove neighbors list from Agent)
        - Handle Agent Position updating with Integrator???
        - Define base class for "FitnessFunctions" ??? 
            - Reduce dependency on derived agent classes?
            - Seems to have high risk of circular dependencies, lowered efficiency
            - Still not sure about this construct.
        
        - Completely remove simulation tracking from point classes
            - This construct absolutely did not make any sense.
            - Derived Agent classes (or actual simulation management classes)
                should be made responsible for this.
        
        *** FLESH OUT DOCUMENTATION AS YOU REFACTOR***
    
    - Generate simple unit test for each class and method -- use pytest package
    
    - Generate easily-parsed output for swarm update tracking for easier verification of update procedure
        - (Check out Pandas)
    
Other Tasks
    - Split pscfppFactory from PolyFTSFactory class.
        - Develop unit tests
    
    - Generate MorphologyAgent class for pscfpp
    
    - Generate PSCF tools for reading output files
