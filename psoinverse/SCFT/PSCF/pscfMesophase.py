# LIBRARY IMPORTS
from psoinverse.mesophases.phaseManagement import MesophaseBase
from psoinverse.mesophases.mesophaseVariables import MesophaseVariable
from psoinverse.mesophases.mesophaseVariables import VariableTypes as varType
import psoinverse.SCFT.PSCF.FileManagers as filemanagers
from filemanagers.fieldfile import CoordFieldFile, WaveVectFieldFile
from filemanagers.paramfile import ParamFile
from filemanagers.outfile import OutFile

# EXTERNAL IMPORTS
import io
import numpy as np
import os

class PSCFMesophase(MesophaseBase):
    """ A Mesophase manager for simulating in PSCF. """
    
    def __init__(self, ID, kgrid, param, **kwargs):
        """
            Initialize the PSCF Mesophase using pre-formatted files.
            
            IMPLEMENTATION NOTE: Presently, no checks are done to ensure 
            that all template files are compatible (that system definitions match).
            These checks are assumed to have been done by the user.
            
            In parameter definitions, 'fileManager' refers to psoinverse.SCFT.PSCF.FileManagers
            
            Parameters
            ----------
            ID : string
                The name of the phase (should be unique within the run, 
                but this is not enforced)
            kgrid : filemanager.fieldfile.WaveVectFieldFile
                A pre-populated Wave-vector format field file.
            param : filemanager.paramfile.ParamFile
                A pre-populated param file. Should minimally contain definitional
                fields (format, MONOMERS, CHAINS, SOLVENTS, ..., BASIS) as well as
                the desired ITERATE fields. It should contain no other fields.
            
            
        """
        self.kgrid = kgrid
        self.param = param
        super().__init__(ID)
    
    def update(self, root, **kwargs):
        """
            Launch a simulation of the mesophase and parse results.
            
            Parameters
            ----------
            root : str, filepath
                The absolute path to the root directory of the simulation.
                Any files generated by the simulation will be placed here.
            
            Returns
            -------
            flag : int
                0 if simulation converged without issue. -1 if an error occurred.
        """
        
        
    
    def setParams(self, newVals):
        """
            Update the value of the (universally formatted)
            keyworded parameters. 
            Formats for common variables specified here. Up to derived class to
            Relate given formats to underlying data.
            
            Parameters
            ----------
            newVals : iterable of MesophaseVariable-type
                The parameters being updated
        """
        self._psoVars = newVals
        # TODO: Add aditional variable options.
        for v in newVals:
            f = v.flag
            if f == varType.BlockFraction:
                # TODO: Add capability to have any block act as floating fraction
                temp = deepcopy(self.param.block_length[v.polymer])
                N = np.sum(np.array(temp))
                newLen = v.scftValue * N
                Nshift = temp[v.block] - newLen
                temp[v.block] = newLen
                temp[-1] = temp[-1] + Nshift
                self.param.block_length[v.polymer] = temp
            elif f == varType.Chi:
                # TODO: Add capability to handle T-dependent chi
                m1, m2 = v.monomerIDs
                self.param.chi[m2][m1] = v.scftValue
            else:
                raise(NotImplementedError("Variable of Type " + str(f) + " not implemented"))
        
        
    @property
    def energy(self):
        """
            The energy of the mesophase as of the most recent simulation.
            
            THIS IS PRESENTLY UNDER CONSTRUCTION. TEMPORARILY USING QUADRATIC
            FITNESS FUNCTION.
            
            Returns
            -------
            E : real or np.NaN
                If the simulation failed to converge, returns np.NaN.
                Else returns the simulated energy.
        """
        # TODO: Implement actual energy value.
        tot = 0.0
        for v in self._psoVars:
            tot = tot + v.scftVal**2
        return np.sqrt(max(tot, 0.0))
    
    
